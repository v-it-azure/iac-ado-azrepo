# Azure DevOps pipeline for Azure deployment

variables:
- group: ado-azrepo

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - vnet

stages:
- stage: Validate
  displayName: Validate
  jobs:
  - job: validate
    pool:
      vmImage: ubuntu-latest
    steps:
    # Install Checkov
    - bash: pip3 install checkov
      displayName: 'Install checkov'
      name: 'install_checkov'

    # Azure Key Vault
    # Download Azure Key Vault secrets
    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only
    
    # Init
    - task: TerraformCLI@0
      displayName: Initialize Terraform
      env:
        ARM_SAS_TOKEN: $(sas-token)
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/vnet'
        commandOptions: '-backend-config=storage_account_name=$(storageaccount) -backend-config=container_name=$(container-name) -backend-config=key=$(key)'
        backendType: 'selfConfigured'

  # Validate
    - task: TerraformCLI@0
      displayName: Validate Config
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/vnet'

  # Verify module files with Checkov
    - bash: checkov --directory $(System.DefaultWorkingDirectory)/vnet/.terraform --skip-check CKV_DOCKER_* -o junitxml > $(System.DefaultWorkingDirectory)/Checkov-Module-Report.xml
      displayName: 'Verify modules with Checkov'
      name: 'checkov_module_check'

  # Publish test results for modules
  # https://adinermie.com/publishing-checkov-terraform-quality-checks-to-azure-devops-pipelines/
    - task: PublishTestResults@2
      displayName: Publish Checkov Module Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*Checkov-Module-Report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: Checkov Module Scan
        failTaskOnFailedTests: false
        publishRunAttachments: true

  # Verify main files with Checkov
    - bash: checkov --directory $(System.DefaultWorkingDirectory)/vnet -o junitxml > $(System.DefaultWorkingDirectory)/Checkov-Root-Report.xml
      displayName: 'Verify root module with Checkov'
      name: 'checkov_root_check'

  # Publish test results for root module
    - task: PublishTestResults@2
      displayName: Publish Checkov Root Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*Checkov-Root-Report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: Checkov Root Scan
        failTaskOnFailedTests: false
        publishRunAttachments: true

# Run GitHub SuperLinter Job
  - job: GHLintJob
      displayName: Run GitHub Super-Linter Scan
      dependsOn: validate
      condition: succeededOrFailed()
      steps:
      # The GitHub Super-Linter runs a combination of various linters, written in bash, 
      # to help validate your source code.
      # In particular, this will execute TFLint, and TerraScan against Terraform files.
      # Documentation: https://github.com/github/super-linter
      # IMPORTANT: We are executing the GitHub Linter twice, because, if the last command in the script is 
      # successful (ie. copying file via 'docker cp'), then the whole script passes, as in, it will not
      # flag the task as 'failed' even though there were errors found when linting! 
      # This bloats the execution time though; as a work-around, we can set the 'failTaskOnFailedTests' field
      # in the PublishTestResults task to 'true' which will catch the failed tests, and fail the pipeline.
      # Personally, I like the failure to be apparent to the respective scan, versus when publishing.
      - script: |
          mkdir super-linter.report
          docker pull github/super-linter:latest
          docker run -e RUN_LOCAL=true -e OUTPUT_DETAILS=detailed -e OUTPUT_FORMAT=tap -v $(System.DefaultWorkingDirectory)/Networking:/tmp/lint --name outputDir github/super-linter:latest
          docker cp outputDir:/tmp/lint/super-linter.report $(System.DefaultWorkingDirectory)/GHLinterReport
          docker run -e RUN_LOCAL=true -v $(System.DefaultWorkingDirectory)/Networking:/tmp/lint github/super-linter:latest
        displayName: 'GitHub Super-Linter Code Scan'
        name: GHLintScan
        condition: always()

      # Publish the GitHub Linter reports as an artifact to Azure Pipelines
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: GH Linter Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/GHLinterReport'
          ArtifactName: GHLinterReport

      # This script converts the GitHub Linter report (from TAP format), to a format that is 
      # supported for consumption in Azure Pipelines (ie. JUnit).
      # Referenced documentation: https://r2devops.io/jobs/static_tests/super_linter
        # The SED commands do the following (in order):
          # Extract message to improve report display, add real newlines (ie. from the \n), and 
          # removes double </failure> that break the syntax in some reports
      - script: |
          sudo npm install -g tap-junit
          mkdir GHLinterReport/Converted
          cd GHLinterReport

          tap-junit --pretty --suite TFLint --input super-linter-TERRAFORM.tap --output $(System.DefaultWorkingDirectory)/Converted --name TFLint-Report.xml
          sed -i 's/<failure message="\(.\+\)" type="fail">.*/<failure message="" type="fail">\n\1\n<\/failure>/g' $(System.DefaultWorkingDirectory)/Converted/TFLint-Report.xml
          sed -i 's/\\n/\n/g' $(System.DefaultWorkingDirectory)/Converted/TFLint-Report.xml
          sed -i ':begin;$!N;s/<\/failure>\n<\/failure>/<\/failure>/;tbegin;P;D' $(System.DefaultWorkingDirectory)/Converted/TFLint-Report.xml

          tap-junit --pretty --suite TerraScan --input super-linter-TERRAFORM_TERRASCAN.tap --output $(System.DefaultWorkingDirectory)/Converted --name TerraScan-Report.xml
          sed -i 's/<failure message="\(.\+\)" type="fail">.*/<failure message="" type="fail">\n\1\n<\/failure>/g' $(System.DefaultWorkingDirectory)/Converted/TerraScan-Report.xml
          sed -i 's/\\n/\n/g' $(System.DefaultWorkingDirectory)/Converted/TerraScan-Report.xml
          sed -i ':begin;$!N;s/<\/failure>\n<\/failure>/<\/failure>/;tbegin;P;D' $(System.DefaultWorkingDirectory)/Converted/TerraScan-Report.xml
        displayName: 'Convert GitHub Linter Report to JUnit'
        name: GHReportConvert
        condition: always()

      # Publish the Converted GitHub Linter reports as an artifact to Azure Pipelines
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: Coverted GH Linter Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/Converted'
          ArtifactName: GHLinterReport-Converted
      
      # Publish the results of the GitHub Super-Linter analysis as Test Results to the pipeline
      - task: PublishTestResults@2
        displayName: Publish TFLint Lint Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TFLint-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/Converted'
          testRunTitle: GitHub Linter - TFLint
          mergeTestResults: false
          failTaskOnFailedTests: false # Change to TRUE if the GitHub Linter is only run once (see notes)
          publishRunAttachments: true
      
      # Publish the results of the GitHub Super-Linter analysis as Test Results to the pipeline
      - task: PublishTestResults@2
        displayName: Publish TerraScan Lint Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TerraScan-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/Converted'
          testRunTitle: GitHub Linter - TerraScan
          mergeTestResults: false
          failTaskOnFailedTests: false # Change to TRUE if the GitHub Linter is only run once (see notes)
          publishRunAttachments: true

      # Clean up any of the containers / images that were used for quality checks
      - bash: |
          docker rmi "github/super-linter:latest" -f | true
        displayName: 'Remove GitHub Super-Linter Docker Image'
        condition: always()
    
- stage: Plan
  displayName: Plan
  jobs:
  - job: plan
    pool:
      vmImage: ubuntu-latest
    steps:
    # Install Checkov
    - bash: pip3 install checkov
      displayName: 'Install checkov'
      name: 'install_checkov'

    # Azure Key Vault
    # Download Azure Key Vault secrets
    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only
  
    # Init
    - task: TerraformCLI@0
      displayName: Initialize Terraform
      env:
        ARM_SAS_TOKEN: $(sas-token)
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/vnet'
        commandOptions: '-backend-config=storage_account_name=$(storageaccount) -backend-config=container_name=$(container-name) -backend-config=key=$(key)'
        backendType: 'selfConfigured'

  # Plan
    - task: TerraformCLI@0
      displayName: Plan Terraform Deployment
      env:
        ARM_SAS_TOKEN: $(sas-token)
        ARM_CLIENT_ID: $(az-client-id)
        ARM_CLIENT_SECRET: $(az-client-secret)
        ARM_SUBSCRIPTION_ID: $(az-subscription)
        ARM_TENANT_ID: $(az-tenant)
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/vnet'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/vnet/main.tfplan'
        publishPlanResults: 'Terraform Plan'

  # Verify plan with Checkov
    - bash: |
        cd $(System.DefaultWorkingDirectory)/vnet
        ls
        terraform show -json main.tfplan > $(System.DefaultWorkingDirectory)/main.json
        checkov -f $(System.DefaultWorkingDirectory)/main.json -o junitxml > $(System.DefaultWorkingDirectory)/Checkov-Plan-Report.xml
      displayName: 'Verify plan with Checkov'
      name: 'checkov_plan_check'
      env:
        ARM_SAS_TOKEN: $(sas-token)
        ARM_CLIENT_ID: $(az-client-id)
        ARM_CLIENT_SECRET: $(az-client-secret)
        ARM_SUBSCRIPTION_ID: $(az-subscription)
        ARM_TENANT_ID: $(az-tenant)

  # Publish test results for plan
    - task: PublishTestResults@2
      displayName: Publish Checkov Plan Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*Checkov-Plan-Report.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: Checkov Plan Scan
        failTaskOnFailedTests: false
        publishRunAttachments: true

# Approve
- stage: Approve
  displayName: Approve
  jobs:
  - job: approve
    displayName: Wait for approval
    pool: server
    steps: 
    - task: ManualValidation@0
      timeoutInMinutes: 60
      inputs:
        notifyUsers: 'epingel@vermeer.com'
        instructions: 'Review the plan in the next hour'

- stage: Apply
  displayName: Apply
  jobs:
  - job: apply
    pool:
      vmImage: ubuntu-latest
    steps:

    # Azure Key Vault
    # Download Azure Key Vault secrets
    - task: AzureKeyVault@1
      inputs:
        ConnectedServiceName: $(service_name)
        keyVaultName: $(key_vault_name)
        secretsFilter: '*'
        runAsPreJob: false # Azure DevOps Services only

  # Init
    - task: TerraformCLI@0
      displayName: Initialize Terraform
      env:
        ARM_SAS_TOKEN: $(sas-token)
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/vnet'
        commandOptions: '-backend-config=storage_account_name=$(storageaccount) -backend-config=container_name=$(container-name) -backend-config=key=$(key)'
        backendType: 'selfConfigured'

  # Apply
    - task: TerraformCLI@0
      displayName: Apply Terraform Deployment
      env:
        ARM_SAS_TOKEN: $(sas-token)
        ARM_CLIENT_ID: $(az-client-id)
        ARM_CLIENT_SECRET: $(az-client-secret)
        ARM_SUBSCRIPTION_ID: $(az-subscription)
        ARM_TENANT_ID: $(az-tenant)
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/vnet'
        commandOptions: '-auto-approve'


